{"version":3,"sources":["src/lemonsync-src.js"],"names":["module","exports","grunt","aws","require","fs","https","mime","clone","registerMultiTask","done","async","lsTask","userOptions","options","access_token","store_host","theme_api_code","theme_repository","httpsOptions","headers","hostname","path","method","awsKey","awsSecret","awsToken","bucket","store","request","res","on","d","JSON","parse","data","key","secret","token","config","update","accessKeyId","secretAccessKey","sessionToken","listObjects","e","console","error","end","s3Upload","file","fileStream","createReadStream","err","s3","S3","uploadBucket","s3PathUpload","normalizePath","putObject","Bucket","Key","Body","CacheControl","ContentType","lookup","s3Copy","s3CopyObject","copyObject","CopySource","MetadataDirective","Error","log","oklns","cloneRepo","repo","process","cwd","checkFiles","files","forEach","i","src","length","isFile","exists","write","tempStat","statSync","currentStat","tempTime","Date","mtime","currentTime","getTime","s3List","listObjectsV2","statusCode","replace"],"mappings":"AAAA;;;;;;;;AAQA;;AAEAA,OAAOC,OAAP,GAAiB,UAASC,KAAT,EAAgB;;AAE/B,MAAIC,MAAMC,QAAQ,SAAR,CAAV;AACA,MAAIC,KAAKD,QAAQ,IAAR,CAAT;AACA,MAAIE,QAAQF,QAAQ,OAAR,CAAZ;AACA,MAAIG,OAAOH,QAAQ,YAAR,CAAX;AACA,MAAII,QAAQJ,QAAQ,WAAR,CAAZ;;AAGAF,QAAMO,iBAAN,CAAwB,WAAxB,EAAqC,0DAArC,EAAiG,YAAW;;AAE1G,QAAIC,OAAO,KAAKC,KAAL,EAAX;;AAEA,QAAIC,SAAS,IAAb;;AAEA,QAAIC,cAAc,KAAKC,OAAL,CAAa;AAC7BC,oBAAc,EADe;AAE7BC,kBAAY,EAFiB;AAG7BC,sBAAgB,EAHa;AAI7BC,wBAAkB;AAJW,KAAb,CAAlB;;AAQA,QAAIC,eAAe;AACjBC,eAAS;AACP,yBAAiB,YAAYP,YAAYE,YADlC;AAEP,wBAAgB;AAFT,OADQ;AAKjBM,gBAAUR,YAAYG,UALL;AAMjBM,YAAM,qBANW;AAOjBC,cAAQ;AAPS,KAAnB;;AAUA,QAAIC,MAAJ;AACA,QAAIC,SAAJ;AACA,QAAIC,QAAJ;AACA,QAAIC,MAAJ;AACA,QAAIC,KAAJ;;AAGA,QAAIC,UAAUvB,MAAMuB,OAAN,CAAcV,YAAd,EAA4B,UAACW,GAAD,EAAS;;AAEjDA,UAAIC,EAAJ,CAAO,MAAP,EAAe,UAACC,CAAD,EAAO;;AAEpBR,iBAASS,KAAKC,KAAL,CAAWF,CAAX,EAAcG,IAAd,CAAmBC,GAA5B;AACAX,oBAAYQ,KAAKC,KAAL,CAAWF,CAAX,EAAcG,IAAd,CAAmBE,MAA/B;AACAX,mBAAWO,KAAKC,KAAL,CAAWF,CAAX,EAAcG,IAAd,CAAmBG,KAA9B;AACAX,iBAASM,KAAKC,KAAL,CAAWF,CAAX,EAAcG,IAAd,CAAmBR,MAA5B;AACAC,gBAAQK,KAAKC,KAAL,CAAWF,CAAX,EAAcG,IAAd,CAAmBP,KAA3B;;AAEAzB,YAAIoC,MAAJ,CAAWC,MAAX,CAAkB,EAACC,aAAajB,MAAd,EAAsBkB,iBAAiBjB,SAAvC,EAAkDkB,cAAcjB,QAAhE,EAAlB;;AAEAkB,oBAAYjB,SAAS,GAAT,GAAeC,KAAf,GAAuB,UAAvB,GAAoCf,YAAYI,cAAhD,GAAiE,aAA7E;AAED,OAZD;AAaD,KAfa,CAAd;;AAiBAY,YAAQE,EAAR,CAAW,OAAX,EAAoB,UAACc,CAAD,EAAO;AACzBC,cAAQC,KAAR,CAAcF,CAAd;AACD,KAFD;;AAKAhB,YAAQmB,GAAR;;AAEA;AACA,aAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,UAAIC,aAAa9C,GAAG+C,gBAAH,CAAoBF,IAApB,CAAjB;;AAEAC,iBAAWpB,EAAX,CAAc,OAAd,EAAuB,UAAUsB,GAAV,EAAe;;AAEpC,YAAIA,GAAJ,EAAS;AACP,gBAAMA,GAAN;AACD;AACF,OALD;;AAOAF,iBAAWpB,EAAX,CAAc,MAAd,EAAsB,YAAY;AAChC,YAAIuB,KAAK,IAAInD,IAAIoD,EAAR,EAAT;AACA,YAAIC,eAAe7B,SAAS,GAAT,GAAeC,KAAf,GAAuB,UAAvB,GAAoCf,YAAYI,cAAnE;AACA,YAAIwC,eAAeC,cAAcR,IAAd,CAAnB;;AAEAI,WAAGK,SAAH,CAAa;AACXC,kBAAQJ,YADG;AAEXK,eAAKJ,YAFM;AAGXK,gBAAMX,UAHK;AAIXY,wBAAc,UAJH;AAKXC,uBAAazD,KAAK0D,MAAL,CAAYf,IAAZ,KAAqB;AALvB,SAAb,EAMG,UAAUG,GAAV,EAAelB,IAAf,EAAqB;;AAEtB,mBAAS+B,MAAT,CAAgBhB,IAAhB,EAAsB;AACpB,gBAAIiB,eAAe,IAAIhE,IAAIoD,EAAR,EAAnB;;AAEAY,yBAAaC,UAAb,CAAwB;AACtBR,sBAAQjC,SAAS,GAAT,GAAeC,KAAf,GAAuB,UAAvB,GAAoCf,YAAYI,cADlC;AAEtBoD,0BAAY1C,SAAS,GAAT,GAAeC,KAAf,GAAuB,UAAvB,GAAoCf,YAAYI,cAAhD,GAAiE,GAAjE,GAAuEiC,IAF7D;AAGtBW,mBAAKX,IAHiB;AAItBa,4BAAc,UAJQ;AAKtBC,2BAAazD,KAAK0D,MAAL,CAAYf,IAAZ,CALS;AAMtBoB,iCAAmB;AANG,aAAxB;AAQD;;AAED,cAAIjB,GAAJ,EAAS;AACP,kBAAM,IAAIkB,KAAJ,CAAU,mCAAmClB,GAA7C,CAAN;AACD,WAFD,MAEO;AACLnD,kBAAMsE,GAAN,CAAUC,KAAV,CAAgB,iBAAevB,IAA/B;AACA;AACA;AACD;AACF,SA5BD;AA6BD,OAlCD;AAmCD;;AAED,aAASwB,SAAT,CAAmBC,IAAnB,EAAyB;AACvBnE,YAAMmE,IAAN,EAAYC,QAAQC,GAAR,KAAgB,QAA5B,EAAsC,UAASxB,GAAT,EAAc;AAClD,YAAIA,GAAJ,EAAS;AACP,gBAAMA,GAAN;AACD,SAFD,MAEO;AACLyB;AACD;AACF,OAND;AAOD;;AAED,aAASA,UAAT,GAAsB;AACpBlE,aAAOmE,KAAP,CAAaC,OAAb,CAAqB,UAAS9B,IAAT,EAAe;AAClC,aAAK,IAAI+B,IAAI,CAAb,EAAgBA,IAAI/B,KAAKgC,GAAL,CAASC,MAA7B,EAAqCF,GAArC,EAA0C;;AAExC,cAAI/E,MAAMgD,IAAN,CAAWkC,MAAX,CAAkBlC,KAAKgC,GAAL,CAASD,CAAT,CAAlB,CAAJ,EAAoC;;AAElC,gBAAK,CAAC/E,MAAMgD,IAAN,CAAWmC,MAAX,CAAkB,cAAYnC,KAAKgC,GAAL,CAASD,CAAT,CAA9B,CAAN,EAAmD;AAC/C/E,oBAAMgD,IAAN,CAAWoC,KAAX,CAAiB,cAAYpC,KAAKgC,GAAL,CAASD,CAAT,CAA7B,EAA0C,EAA1C;AACAhC,uBAASC,KAAKgC,GAAL,CAASD,CAAT,CAAT;AACH,aAHD,MAGO;AACL,kBAAIM,WAAWlF,GAAGmF,QAAH,CAAY,cAAYtC,KAAKgC,GAAL,CAASD,CAAT,CAAxB,CAAf;AACA,kBAAIQ,cAAcpF,GAAGmF,QAAH,CAAYtC,KAAKgC,GAAL,CAASD,CAAT,CAAZ,CAAlB;AACA,kBAAIS,WAAW,IAAIC,IAAJ,CAASJ,SAASK,KAAlB,CAAf;AACA,kBAAIC,cAAc,IAAIF,IAAJ,CAASF,YAAYG,KAArB,CAAlB;AACA,kBAAIC,YAAYC,OAAZ,KAAwBJ,SAASI,OAAT,EAA5B,EAAgD;AAC9C5F,sBAAMgD,IAAN,CAAWoC,KAAX,CAAiB,cAAYpC,KAAKgC,GAAL,CAASD,CAAT,CAA7B,EAA0C,EAA1C;AACAhC,yBAASC,KAAKgC,GAAL,CAASD,CAAT,CAAT;AACD;AACF;AACF;AACF;AACF,OApBD;AAqBD;;AAED,aAASrC,WAAT,CAAqB+B,IAArB,EAA2B;AACzB,UAAIoB,SAAS,IAAI5F,IAAIoD,EAAR,EAAb;AACAwC,aAAOC,aAAP,CAAqB;AACnBpC,gBAAQe;AADW,OAArB,EAEG,UAAStB,GAAT,EAAclB,IAAd,EAAoB;AACrB,YAAIkB,IAAI4C,UAAJ,KAAmB,GAAvB,EAA4B;AAC1B/F,gBAAMsE,GAAN,CAAUC,KAAV,CAAgB,iCAAhB;AACAC,oBAAU7D,YAAYK,gBAAtB;AACD,SAHD,MAGO;AACL4D;AACD;AACF,OATD;AAUD;;AAED,aAASpB,aAAT,CAAuBR,IAAvB,EAA6B;AAC3B,aAAOA,KAAKgD,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAP;AACD;AAGF,GA5JD;AA8JD,CAvKD","file":"lemonsync.js","sourcesContent":["/*\n * grunt-lemonsync\n * https://github.com/ubuntu/workspace\n *\n * Copyright (c) 2016 Amir Farzan\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n  \n  var aws = require('aws-sdk');\n  var fs = require('fs');\n  var https = require('https');\n  var mime = require('mime-types');\n  var clone = require('git-clone');\n\n\n  grunt.registerMultiTask('lemonsync', 'A grunt plugin for working on LemonStand themes locally.', function() {\n    \n    var done = this.async();\n    \n    var lsTask = this;\n    \n    var userOptions = this.options({\n      access_token: '',\n      store_host: '',\n      theme_api_code: '',\n      theme_repository: ''\n    });\n    \n\n    var httpsOptions = {\n      headers: {\n        'Authorization': 'Bearer ' + userOptions.access_token,\n        'Content-Type': 'application/json'\n      },\n      hostname: userOptions.store_host,\n      path: '/api/v2/identity/s3',\n      method: 'POST'\n    };\n\n    var awsKey;\n    var awsSecret;\n    var awsToken;\n    var bucket;\n    var store;\n    \n\n    var request = https.request(httpsOptions, (res) => {\n\n      res.on('data', (d) => {\n\n        awsKey = JSON.parse(d).data.key;\n        awsSecret = JSON.parse(d).data.secret;\n        awsToken = JSON.parse(d).data.token;\n        bucket = JSON.parse(d).data.bucket;\n        store = JSON.parse(d).data.store;\n    \n        aws.config.update({accessKeyId: awsKey, secretAccessKey: awsSecret, sessionToken: awsToken});\n        \n        listObjects(bucket + '/' + store + '/themes/' + userOptions.theme_api_code + '/theme.yaml');\n\n      });\n    });\n\n    request.on('error', (e) => {\n      console.error(e);\n    });\n\n    \n    request.end();\n    \n    // Uploads theme files to S3.\n    function s3Upload(file) {\n      var fileStream = fs.createReadStream(file);\n  \n      fileStream.on('error', function (err) {\n        \n        if (err) { \n          throw err; \n        }\n      });  \n\n      fileStream.on('open', function () {\n        var s3 = new aws.S3();\n        var uploadBucket = bucket + '/' + store + '/themes/' + userOptions.theme_api_code;\n        var s3PathUpload = normalizePath(file);\n\n        s3.putObject({\n          Bucket: uploadBucket,\n          Key: s3PathUpload,\n          Body: fileStream,\n          CacheControl: 'no-cache',\n          ContentType: mime.lookup(file) || 'application/octet-stream',\n        }, function (err, data) {\n          \n          function s3Copy(file) {\n            var s3CopyObject = new aws.S3();\n      \n            s3CopyObject.copyObject({\n              Bucket: bucket + '/' + store + '/themes/' + userOptions.theme_api_code,\n              CopySource: bucket + '/' + store + '/themes/' + userOptions.theme_api_code + '/' + file,\n              Key: file,\n              CacheControl: 'no-cache',\n              ContentType: mime.lookup(file),\n              MetadataDirective: 'REPLACE'\n            });\n          }\n          \n          if (err) { \n            throw new Error('Error in s3Upload function -> ' + err);\n          } else {\n            grunt.log.oklns('Uploaded... '+file);\n            // s3Copy(file);\n            // done();\n          }\n        });\n      });\n    }\n    \n    function cloneRepo(repo) {\n      clone(repo, process.cwd() + '/theme', function(err) {\n        if (err) {\n          throw err;\n        } else {\n          checkFiles();\n        }\n      });\n    }\n    \n    function checkFiles() {\n      lsTask.files.forEach(function(file) {\n        for (var i = 0; i < file.src.length; i++) {\n          \n          if (grunt.file.isFile(file.src[i])) {\n            \n            if ( !grunt.file.exists(\".ls-temp/\"+file.src[i]) ) {\n                grunt.file.write(\".ls-temp/\"+file.src[i], '');\n                s3Upload(file.src[i]);\n            } else {\n              var tempStat = fs.statSync(\".ls-temp/\"+file.src[i]);\n              var currentStat = fs.statSync(file.src[i]);\n              var tempTime = new Date(tempStat.mtime);\n              var currentTime = new Date(currentStat.mtime);\n              if (currentTime.getTime() > tempTime.getTime()) {\n                grunt.file.write(\".ls-temp/\"+file.src[i], '');\n                s3Upload(file.src[i]);\n              }\n            }\n          }\n        }\n      });\n    }\n    \n    function listObjects(repo) {\n      var s3List = new aws.S3();\n      s3List.listObjectsV2({\n        Bucket: repo\n      }, function(err, data) {\n        if (err.statusCode !== 200) {\n          grunt.log.oklns('Downloading theme repository...');\n          cloneRepo(userOptions.theme_repository);\n        } else {\n          checkFiles();\n        }\n      });\n    }\n    \n    function normalizePath(file) {\n      return file.replace('theme/', '');\n    }\n    \n\n  });\n\n};\n"]}